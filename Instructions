模拟KTV点歌系统

一、选题
   ①模拟KTV点歌系统：通过ｃ语言设计程序并应用数据结构实现点歌系统的基本功能。
   ②用户可按歌名查找某首歌曲或按歌手名查找其所有歌曲，点歌后显示所点歌曲歌词。管理员可添加和删除歌曲，每个歌曲的歌词用一个单独的文件存储。
二、需求分析
   ①需要实现的基本功能有：
１.用户功能：点歌（查找+播放）、查询所有歌曲。
２.管理员功能：添加歌曲、删除歌曲、修改密码、退出点歌系统。
②测试功能目标：将测试歌曲（见附件）存入歌曲库，可以实现上述六种功能，并具有良好的鲁棒性。
  性能目标：将歌曲库增删查改的时间复杂度限制在O(n)以下, 使得在歌曲数量庞大的情况下仍能够用较短时间完成操作，保证用户体验。
三、概要设计（总体设计）
   ①设计方案：程序分为前后端两大部分，模拟实现一个完整的商业化软件。前端模块＂ｍａｉｎ．ｃ＂实现可视化界面及业务逻辑，后端模块＂ｓｏｎｇＤａｔａ．ｃ＂实现对歌曲库（模拟数据库）的增删查改。为提高代码的复用率，用尽量少的代码实现更多功能，我们对各项基本操作封装为函数，并在主函数中调用。
   ②数据结构的设计：乐曲库由一个顺序表实现，表的每一个节点为一个结构体，存储一首歌曲的名称、作者、文件存储路径。通过顺序表的索引可以用O(1)的时间复杂度完成对某首歌曲的操作。
   ③各模块的描述：
前端模块＂ｍａｉｎ．ｃ＂包括：
int main()／／主函数，接受用户指令，调用功能函数实现业务逻辑；
void menu()／／菜单显示函数，即可视化界面；
int pwd()／／管理员密码验证函数，初始密码为１２３４５６，验证管理员身份。
void changePwd()／／修改密码
后端模块＂ｓｏｎｇＤａｔａ．ｃ＂包括：
void Output();／／输出全部歌曲 
void play(int ans);／／按传入编号播放音乐
void start();／／初始化系统
int find(char *inputname);／／按传入名称（歌曲/歌手）查找歌曲，返回歌曲文件位置
void addSong();／／添加歌曲到库
void deleSong(int ans);／／删除歌曲出库
   

 
四、详细设计
模块算法描述：
在此对我主要编写的模块进行详细阐述。

主函数main()调用各功能函数实现业务，通过一个while循环不断接收用户指令直到管理员使用功能5退出循环，结束系统。
start();//初始化系统乐曲库
    while (1) {//业务循环
        menu();//清屏并显示菜单
        order = getchar();//输入命令号
        if (order == '1') {//点歌
            int ans;//歌曲编号
            char inputname[20];
            printf("请输入歌曲名或歌手名：\n");
            scanf("%s",inputname);//输入相关信息
            ans = find(inputname);//查找相关歌曲，返回歌曲编号
            if(ans!=-1)play(ans);//播放音乐
            system("pause");//按回车结束操作
        } else if (order == '2') {//全部歌曲
            Output();//输出整个歌曲库
            getchar();//按回车结束操作
            system("pause");
        } else if (order == '3') {//添加歌曲（管理员权限）
            if (pwd()) {//验证管理员密码
                addSong();//添加歌曲函数
            }
            system("pause");
        } else if (order == '4') {//删除歌曲（管理员权限）
            if (pwd()) {
                int ans;//存放歌曲路径
                char inputname[20];
                printf("请输入要删除的歌曲名或者歌手名：\n");
                scanf("%s",inputname);//输入相关信息
                ans = find(inputname);//查找相关歌曲，返回歌曲路径
                if(ans!=-1)deleSong(ans);//若找到了就删除
            }
            system("pause");//点击任意键继续
        } else if (order == '5') {//退出系统（管理员权限）
            if (pwd())break;//危险！退出程序
        }else if (order == '6') {//修改密码（管理员权限）
            if (pwd()){
            	changePwd();
			} 
			getchar();
			system("pause");
        }
        else {
        	printf("指令无效");
        	getchar();
        	system("pause");
		}
    }
    return 0;
}



歌曲库顺序表：

struct Song {
    char songName[20];//歌曲名
    char singerName[10];//歌手名
    char filePath[80];//歌词的路径
};
typedef struct Song datatype;
typedef struct {
    datatype data[MAXSIZE];
    int last;
} SongSequenlist;


管理员密码验证函数pwd():
当管理员使用功能3、4、5时，需输入密码以验证身份，pwd函数从键盘读入一个长整形，与系统密码进行比较，验证成功则返回1，否则返回0，供主函数参考以决定是否执行管理员功能。注意：初始密码为123456。
int pwd() {
    //管理员密码验证函数
    int realpwd = 123456;//真实密码为123456
    long int inputpwd;//用户输入的密码
    printf("请输入管理员密码：");
    scanf("%ld", &inputpwd);
    if (inputpwd == realpwd)return 1;//验证成功则返回1
    else {
        printf("密码错误，操作失败");
        return 0;
    }
}

管理员密码验证函数changePwd()，用于修改管理员密码：
void changePwd(){
	printf("请输入您的新密码");
	scanf("%d",&realpwd);//realpwd为全局变量
	printf("修改成功，您的新密码为%d",realpwd); 
}

按传入名称查找歌曲find()函数：
Find函数的参数为为字符串，传入歌曲关键词信息，如歌名、歌手名，通过遍历歌曲库顺序表找到符合关键词的所有歌曲，若数量多于一首则交由用户挑选，最终返回该歌曲在歌曲库中的位置。
extern int find(char *inputname) {
    int num = 0;//记录符合要求的歌曲数量
    int ans=0;//选择的歌曲编号
    int i;
	for ( i = 0; i <= ALL->last; ++i) {
        if (strcmp(inputname, ALL->data[i].songName) == 0 || strcmp(inputname, ALL->data[i].singerName) == 0) {
            printf("歌曲库的第%d首歌符合您的搜索要求：\n", i+1);
            printf("歌名为%s,演唱者为%s\n", ALL->data[i].songName, ALL->data[i].singerName);
            num++;
            ans = i;
        }
    }
    if (num > 1) {
        printf("您要选择的歌曲的编号为：");
        scanf("%d", &ans);
		 ans--；
    } else if (num == 0) {
        printf("抱歉，歌曲库中暂无相关，您可以联系管理员添加歌曲\n");
        return -1;
    }
    return ans;//返回该歌曲在歌曲库中的位置
}


播放音乐函数play():
Play函数接收的参数为歌曲在顺序表中的索引，通过索引以O(1)的时间复杂度找到歌曲的存储路径，若路径无法正常打开则返回错误提示，正常打开则播放歌词直到播放完毕。
extern void play(int ans) {//播放指定序号的歌曲
    char*filepath;//文件路径
    filepath=ALL->data[ans].filePath;
    FILE *fp = NULL;
    char str1[100];
    fp = fopen(filepath, "r");
    if (fp == NULL) {
        printf("该歌曲路径错误，播放失败，请联系管理员处理\n");
        return;
    }
    while (!feof(fp)) {//播放歌词
        fgets(str1, 99, fp);
        printf("%s", str1);
        Sleep(2000);//每句间隔三秒
    }
    printf("\n播放完毕");
    fclose(fp);//关闭文件
}

删除歌曲deleSong()函数：
deleSong函数接受的参数为歌曲在顺序表中的索引，由find函数返回给主函数再传入dele，dele得到索引i后将i后的歌曲逐次覆盖上一首，以实现i号歌曲的删除。
extern void deleSong(int ans) {
	int i;
    for ( i = ans; i <ALL->last ; ++i) {
        ALL->data[i] = ALL->data[i+1];
    }
    ALL->last--;//数量减1
    printf("删除成功");
}

五、调试分析
   在软件搭建的开始，我使用Clion建立C99标准下的project，后续开发过程中为与同作者保持同步，转用DevC++，C标准不同造成了一些错误，后来一一进行修正。
 
    在find函数中，由于程序内部使用的索引值从0开始，而用户的默认习惯是从1开始，因此我对两种表示方式进行了转换，避免造成用户的困惑。
   在构建歌曲库时，由于对路径长度的低估，为结构体的filepath开辟了较小的空间，路径被截断导致无法正常播放，于是我们将其改为char filePath[80]，以避免意外错误发生。
六、使用说明
   KTV点歌系统已被编译为exe程序（见附件），可在windows平台下直接运行。
1.双击桌面图标：
 
2：根据屏幕提示完成初始化，启动系统。
 
注意：管理员初始密码为123456.


 
